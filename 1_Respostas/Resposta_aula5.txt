Para as questões 2 a 5, considere que as variáveis f, g, h, i e j são do tipo inteiro (16 bits na arquitetura do MSP430), e que o vetor A[] é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores: f: R4 g: R5 h: R6 i: R7 j: R8 A: R9 Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.

   1) Escreva os trechos de código assembly do MSP430 para: (a) Somente setar o bit menos significativo de R5. (b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo. (c) Somente zerar o terceiro bit menos significativo de R7. (d) Somente zerar o terceiro e o quarto bits menos significativo de R8. (e) Somente inverter o bit mais significativo de R9. (f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10.

   2) "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

if(i>j) f = g+h+10;
else f = g-h-10;

   3) "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

while(save[i]!=k) i++;

   4) "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

for(i=0; i<100; i++) A[i] = i*2;

   5) "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

for(i=99; i>=0; i--) A[i] = i*2;

RESPOSTAS

R1)
(a) bis.b #BIT0,R5
(b) bis.b #3,R6
(c) bic.b #BIT2,R7
(d) bic.b #12,R8
(e) inv.w #BIT15,R9
(f) inv.w #0xF0,R10
     bis.b #0xF,R10

R2)
	mov.w R5, R4		; f= g
	mov.w R6, R15		; T0= h
	add.w #10, R15		; T0= h+10
	comp R7, R8		; Comparar I com  J
	jge ELSE		; Pula se J >= I 	     
	add.w R15, R4		; f= g + (h + 10)
	jmp EXIT
ELSE:	sub.w R15, R4		; f= g - (h + 10)
EXIT:

R3)
	LOOP: 
	mov.w R7, R12           ; R7 = i, R12 = temporário                
	rla R12                 ; R12 = 2*i                               
	add.w R10, R12          ; R10 = save, R12 = save + 2*i = &save[i] (multiplicou por 2 porque anda de 2 posições em 2 posições)
	cmp 0(R12), R9          ; Compara save[i] com k (R9)              ; tipo 200 pro 202,204, etc.
                                                                     ; O R12 andou 0 posições e foi enviado pro R9
	jeq EXIT                ; save[ i ] != k? 
	inc.w R7      		; i += 1;
	jmp LOOP

R4)
	mov.w #0, R15		;R15= i= 0
	mov.w #100, R11		;R11= 100
FOR:	comp R11, R15		
	jeq EXIT		; Pula se i=100
	inc.w R5		; i++
	rla R15			; R15= 2i
	mov.w R9, R14		; R14 = A (0)
	add.w R15, R14		; R14 = A + 2i = A[i]
	add.w R15,0(R14)	; A[i] = i*2;
	rra R15			; R15= i
	jmp FOR
EXIT:

R5)	
	mov.w #99, R15		;R15= i= 99
	mov.w #0, R11		;R11= 0
FOR:	comp R11, R15
	jeq EXIT		; Pula se i=0
	dec.w R5		; i++
	rla R15			; R15= 2i
	mov.w R9, R14		; R14 = A (0)
	add.w R15, R14		; R14 = A + 2i = A[i]
	add.w R15,0(R14)	; A[i] = i*2;
	rra R15			; R15= i
	jmp FOR
EXIT:
