Para cada questão, escreva funções em C e/ou sub-rotinas na linguagem Assembly do MSP430. Reaproveite funções e sub-rotinas de uma questão em outra, se assim desejar. Leve em consideração que as sub-rotinas são utilizadas em um código maior, portanto utilize adequadamente os registradores R4 a R11. As instruções da linguagem Assembly do MSP430 se encontram ao final deste texto.

1. (a) Escreva uma função em C que calcule a raiz quadrada `x` de uma variável `S` do tipo float, utilizando o seguinte algoritmo: após `n+1` iterações, a raiz quadrada de `S` é dada por

```
x(n+1) = (x(n) + S/x(n))/2
```

O protótipo da função é:

```C
unsigned int Raiz_Quadrada(unsigned int S);
```

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável `S` é fornecida pelo registrador R15, e a raiz quadrada de `S` (ou seja, a variável `x`) é fornecida pelo registrador R15 também.

2. (a) Escreva uma função em C que calcule `x` elevado à `N`-ésima potência, seguindo o seguinte protótipo: 

```C
int Potencia(int x, int N);
```

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. `x` e `n` são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida no registrador R15.

3. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula a divisão de `a` por `b`, onde `a`, `b` e o valor de saída são inteiros de 16 bits. `a` e `b` são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através do registrador R15.

4. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o resto da divisão de `a` por `b`, onde `a`, `b` e o valor de saída são inteiros de 16 bits. `a` e `b` são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através do registrador R15.

5. (a) Escreva uma função em C que indica a primalidade de uma variável inteira sem sinal, retornando o valor 1 se o número for primo, e 0, caso contrário. Siga o seguinte protótipo:

```C
int Primalidade(unsigned int x);
```

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.

6. Escreva uma função em C que calcula o duplo fatorial de n, representado por n!!. Se n for ímpar, n!! = 1*3*5*...*n, e se n for par, n!! = 2*4*6*...*n. Por exemplo, 9!! = 1*3*5*7*9 = 945 e 10!! = 2*4*6*8*10 = 3840. Além disso, 0!! = 1!! = 1.
O protótipo da função é:

```C
unsigned long long DuploFatorial(unsigned long long n);
```

7. (a) Escreva uma função em C que calcula a função exponencial utilizando a série de Taylor da mesma. Considere o cálculo até o termo n = 20. O protótipo da função é `double ExpTaylor(double x);`
(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430, mas considere que os valores de entrada e de saída são inteiros de 16 bits. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.

8. Escreva uma sub-rotina na linguagem Assembly do MSP430 que indica se um vetor esta ordenado de forma decrescente. Por exemplo:
[5 4 3 2 1] e [90 23 20 10] estão ordenados de forma decrescente.
[1 2 3 4 5] e [1 2 3 2] não estão.
O primeiro endereço do vetor é fornecido pelo registrador R15, e o tamanho do vetor é fornecido pelo registrador R14. A saída deverá ser fornecida no registrador R15, valendo 1 quando o vetor estiver ordenado de forma decrescente, e valendo 0 em caso contrário.

9. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o produto escalar de dois vetores, `a` e `b`. O primeiro endereço do vetor `a` deverá ser passado através do registrador R15, o primeiro endereço do vetor `b` deverá ser passado através do registrador R14, e o tamanho do vetor deverá ser passado pelo registrador R13. A saída deverá ser fornecida no registrador R15.

10. (a) Escreva uma função em C que indica se um vetor é palíndromo. Por exemplo:
	[1 2 3 2 1] e [0 10 20 20 10 0] são palíndromos.
	[5 4 3 2 1] e [1 2 3 2] não são.
Se o vetor for palíndromo, retorne o valor 1. Caso contrário, retorne o valor 0. O protótipo da função é:

```C
int Palindromo(int vetor[ ], int tamanho);
```

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. O endereço do vetor de entrada é dado pelo registrador R15, o tamanho do vetor é dado pelo registrador R14, e o resultado é dado pelo registrador R15.]

RESPOSTAS
1)
(a)
float Raiz_Quadrada(unsigned int S){
	float x = S/2;
	printf("O Valor da Raiz Quadrada e = %f\n\n", x);
	if (S<=1)
		x=S;
	else {
		for(int n = 1; n<5; n++){             //número de iterações de x
		x = (x + S/x)/2;
		printf("O Valor da Raiz Quadrada e = %f\n\n", x);

		}
	}

    return x;
}

// COMO A RESPOSTA DA FUNÇÃO É NUMERO INTEIRO, NÃO PRECISAMOS DE TANTAS ITERAÇÕES
// SE TIVERMOS APENAS 1 ITERAÇÃO PODEMOS RESUMIR O PROGRAMA PARA.

 unsigned int Raiz_Quadrada(unsigned int S){
	float x = S/2;	   
	x = (x + 2)/2;	  //x = (x + S/x)/2 =  (x + S/S/2)/2 = (x + 2)/2;

    return x;
}
(b)
Raizquadrada
	rra R15		;x=S/2
	add.w #2, R15	;x=x+2
	rra R15		;(x + 2)/2
	return
2)
(a)		
    int Potencia(int x, int n){
    int i=1;
    int xo=x;

        if(n==0)
            x=1;
        if(n<0)
            x=0;
        else{
            for(n;i<n;i++){
                x=xo*x;
            }
        }
    return x;
}
	
(b)
Potenciacao:
	mov.w #1,R11
	mov.w R15,R12
	mov.w R15,R13
	cmp #0, R14
	jne Multiplicacao
	mov.w #1, R15
	ret
PotenciaNeg:
	mov.w #0, R15
	ret
Desloca:
	mov.w R15,R12
	rra.w R12
	inc.w R11
	jmp Multiplicacao
Multiplicacao:
	cmp #Bit15,R14
	jge PotenciaNeg		; Se n for negativo pula para potenciaNeg
	cmp R11,R14
	jeq RPotenciacao
	and.w #Bit1,R12
	cmp #0, R12
	jeq Desloca
	add.w R15,R13
	inc.w R11
	jmp Multiplicacao
Rpotenciacao:
	mov.w R13,R15
	ret
3)
Divisao
	mov.w #0,R11	;i=0
	cmp #0,R14	;div por 0
	jeq ERRO
	cmp #1,R14	;div por 1
	jeq Div1
LoopDiv
	cmp R14, R15
	jl Rdiv		;a<b retorna 0
	sub.w R14,R15	;a=a-b
	inc R11		;i++
	jmp LoopDiv
	
Rdiv
	mov.w R11, R15	;Retorna i
	ret
Div1
	ret		; Retorna 'a', já que a/1 = 'a'
ERRO
	mov.w #-1,R15	; Retorna -1 como Erro
	ret
4)
Divisao
	mov.w #0,R11	;i=0
	cmp #0,R14	;div por 0
	jeq ERRO
	cmp #1,R14	;div por 1
	jeq Div1
LoopDiv
	cmp R14, R15
	jl Rdiv		;a<b retorna 0
	sub.w R14,R15	;a=a-b
	inc R11		;i++
	jmp LoopDiv
	
Rdiv
	ret		; Retorna 'a' quando a<b
Div1
	mov.w #0,R15
	ret		; Retorna '0', já que o resto de a/1 = '0'
ERRO
	mov.w #-1,R15	; Retorna -1 como Erro
	ret
5)
a)
#include <stdio.h>
// Faz o resto da divisao
int Restdivisao(int num, int div){
    int i=0;
    if (div!=0){
        if (div!=1){
            if(num>=div){
                for (i;num>=div; i++){
                    num-=div;
                }
                i= num;
            }
        }else
        i=0;
    }else
        i=-1;

    return i;
}

// Verifica se é primo, caso for retorna 1, caso contrário retorna 0.
int primalidade(unsigned int num){
    int p= num/2;
    int i=2;
    int verifica=0;
        if (num!=0){
            if (num>3){
                for (i; i<=p; i++){
                    verifica = Restdivisao(num,i);
                    if (verifica==0){
                        break;
                    }
                }
                    if (verifica!=0){   // Se tiver resto, o numero é primo
                        verifica =1;
                    }

            }else
                verifica=1; //Se num for 1,2 ou 3
        } else
            verifica=0;    //Se num for 0
    return verifica;
}

void main()
{
    int num;

    printf("digite um numero para verificar se sua primalidade e verdadeira\n");
    scanf("%d", &num);

    int p=primalidade(num);
    printf("P = %d \nSe P = 1 o numero e primo \nSe P = 0 o numero nao e primo \n", p);

    return 0;
}
b)

;--------------------------------Função Primalidade----------------------------------------
Primalidade
	mov.w R15,R11
	rra R11			;p= num/2= R11
	mov.w #2, R14		;i= R14
	mov.w #0, R13		;verifica= R13
	cmp #0,R15
	jeq Rfalsa		;num=0, pula para resposta de 0 (Rfalsa)
	cmp #4,R15		
	jl RVerdadeira			;num<=3, pula para resposta de 1 a 3 (RVerdadeira)
LoopPri
	cmp R14, R11
	jl VerificaPrimalidade	;p<i, pula para verifica primalidade (VerificaPrimalidade)
	push.w R11		;Quardando o valor das variaveis p, i e num
	push.w R14
	push.w R15
	call RestDivisao
	mov.w R15, R13		;Verifica recebe o valor do resto de divisão
	pop.w R15		;devolve o valor das variaveis p, i e num
	pop.w R14
	pop.w R11
	cmp #0,R13
	jeq VerificaPrimalidade
	inc R14			;i++
	jmp LoopPri

VerificaPrimalidade	
	cmp #0,R13
	jne Rfalsa
	
RVerdadeira
	mov.w #1,R15
	ret	
Rfalsa
	mov.w #0,R15
	ret
;------------------------------Função Resto de Divisão--------------------------------------
RestDivisao
	mov.w #0,R11	;i=0
	cmp #0,R14	;div por 0
	jeq ERRO
	cmp #1,R14	;div por 1
	jeq Div1
LoopDiv
	cmp R14, R15
	jl Rdiv		;a<b retorna 0
	sub.w R14,R15	;a=a-b
	inc R11		;i++
	jmp LoopDiv
	
Rdiv
	ret		; Retorna 'a' quando a<b
Div1
	mov.w #0,R15
	ret		; Retorna '0', já que o resto de a/1 = '0'
ERRO
	mov.w #-1,R15	; Retorna -1 como Erro
	ret
6)
#include <stdio.h>
// Faz o duplo fatorial
unsigned long long DuploFatorial(unsigned long long n){
   unsigned long long i = n;
    if(n>1){
        while(i>2){
            i-=2;
            n=n*i;
        }
    }else
        n=1;

    return n;
}

void main()
{
     unsigned long long num;

    printf("digite um numero para o calculo do duplo fatorial\n");
    scanf("%lld", &num);

    num = DuploFatorial(num);
    printf("num = %lld \n", num);

    return 0;
}
