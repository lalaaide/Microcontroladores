Para todas as questões, utilize os LEDs e/ou os botões da placa Launchpad do MSP430.

1-Escreva um código em C que pisca os LEDs ininterruptamente.

2-Escreva um código em C que pisca os LEDs ininterruptamente. No ciclo que pisca os LEDs, o tempo que os LEDs ficam ligados deve ser duas vezes maior do que o tempo que eles ficam desligados.

3-Escreva um código em C que acende os LEDs quando o botão é pressionado.

4-Escreva um código em C que pisca os LEDs ininterruptamente somente se o botão for pressionado.

5-Escreva um código em C que acende os LEDs quando o botão é pressionado. Deixe o MSP430 em modo de baixo consumo, e habilite a interrupção do botão.

RESPOSTAS
Q1)
#include <msp430.h> 
#define Leds (BIT6 + BIT0)

void delay(volatile unsigned int i)
{
    while((i--)>0);
}

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	P1OUT &= ~Leds;
	P1DIR |= Leds;
	
	while(1)
	{
	    P1OUT ^= Leds;
	    delay(0xFFFF);
	}

}
Q2)
#include <msp430.h> 
#define Leds (BIT6 + BIT0)

void delay(volatile unsigned int i)
{
    while((i--)>0);
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    P1OUT &= ~Leds;
    P1DIR |= Leds;

    while(1)
    {
        P1OUT |= Leds;
        delay(60000);
        P1OUT &= ~Leds;
        delay(30000);
    }

}
Q3)
#include <msp430.h> 
#define Leds (BIT0 + BIT6)
#define botao BIT3

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	P1OUT &= ~Leds;
	P1DIR |= Leds;
	P1DIR &= ~botao;
	P1REN |= botao;             // Tipo pull-up
	P1OUT |= botao;             // Valor inicial
	
	while(1)
	{
	    if((P1IN & botao)==0)
	        P1OUT |= Leds;
	    else
	        P1OUT &= ~Leds;
	}
}
Q4)
#include <msp430.h> 
#define Leds (BIT0 + BIT6)
#define botao BIT3

void delay(volatile unsigned int i)
{
    while((i--)>0);
}
int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    P1OUT &= ~Leds;
    P1DIR |= Leds;
    P1DIR &= ~botao;
    P1REN |= botao;             // Tipo pull-up
    P1OUT |= botao;             // Valor inicial

    while(1)
    {
        if((P1IN & botao)==0)
        {
            P1OUT ^= Leds;
            delay(50000);
        }
        else
            P1OUT &= ~Leds;
    }
}
Q5)
//PERGUNTAR PARA O PROFESSOR
#include <msp430.h> 
#include <legacymsp430.h>       // Rodar paradas
#define Leds (BIT0 + BIT6)
#define Botao BIT3

void delay(volatile unsigned int i)
{
    while((i--)>0);
}

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	
	P1DIR |= Leds;              // Leds são saidas
	P1DIR &= Botao;             // Botao é entrada
	P1OUT &= ~Leds;             // Leds começam desligados
	P1REN |= Botao;             // Habilita pull-up
	P1OUT |= Botao;             // Inicia em Alto

	P1IE |= Botao;              // Habilita a interrupção no botão
	P1IES |= Botao;             // Interrupção na borda de descida

	_BIS_SR(GIE + LPM4_bits);

}
interrupt(PORT1_VECTOR) Interrupcao_P1(void)
{
    P1OUT &= ~LEDS;
    while((P1IN&BTN)==0);
    P1OUT |= LEDS;
    P1IFG &= ~BTN;
}
